// This file is part of mlnx-ofed. It is subject to the license terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/mlnx-ofed/master/COPYRIGHT. No part of mlnx-ofed, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
// Copyright Â© 2016 The developers of mlnx-ofed. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/lemonrock/mlnx-ofed/master/COPYRIGHT.


extern "C"
{
	pub fn ibv_ack_async_event(event: *mut ibv_async_event);
	pub fn ibv_ack_cq_events(cq: *mut ibv_cq, nevents: c_uint);
	pub fn ibv_alloc_pd(context: *mut ibv_context) -> *mut ibv_pd;
	pub fn ibv_attach_mcast(qp: *mut ibv_qp, gid: *const ibv_gid, lid: u16) -> c_int;
	pub fn ibv_close_device(context: *mut ibv_context) -> c_int;
	pub fn ibv_close_xrc_domain(d: *mut ibv_xrc_domain) -> c_int;
	pub fn ibv_cmd_alloc_mw(pd: *mut ibv_pd, type_: ibv_mw_type, mw: *mut ibv_mw, cmd: *mut ibv_alloc_mw, cmd_size: usize, resp: *mut ibv_alloc_mw_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_alloc_pd(context: *mut ibv_context, pd: *mut ibv_pd, cmd: *mut ibv_alloc_pd, cmd_size: usize, resp: *mut ibv_alloc_pd_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_attach_mcast(qp: *mut ibv_qp, gid: *const ibv_gid, lid: u16) -> c_int;
	pub fn ibv_cmd_close_xrcd(xrcd: *mut verbs_xrcd) -> c_int;
	pub fn ibv_cmd_create_ah(pd: *mut ibv_pd, ah: *mut ibv_ah, attr: *mut ibv_ah_attr, resp: *mut ibv_create_ah_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_create_cq(context: *mut ibv_context, cqe: c_int, channel: *mut ibv_comp_channel, comp_vector: c_int, cq: *mut ibv_cq, cmd: *mut ibv_create_cq, cmd_size: usize, resp: *mut ibv_create_cq_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_create_flow(qp: *mut ibv_qp, flow_attr: *mut ibv_flow_attr) -> *mut ibv_flow;
	pub fn ibv_cmd_create_qp(pd: *mut ibv_pd, qp: *mut ibv_qp, attr: *mut ibv_qp_init_attr, cmd: *mut ibv_create_qp, cmd_size: usize, resp: *mut ibv_create_qp_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_create_srq(pd: *mut ibv_pd, srq: *mut ibv_srq, attr: *mut ibv_srq_init_attr, cmd: *mut ibv_create_srq, cmd_size: usize, resp: *mut ibv_create_srq_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_create_srq_ex(context: *mut ibv_context, srq: *mut verbs_srq, vsrq_sz: c_int, attr_ex: *mut ibv_srq_init_attr_ex, cmd: *mut ibv_create_xsrq, cmd_size: usize, resp: *mut ibv_create_srq_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_dealloc_mw(mw: *mut ibv_mw, cmd: *mut ibv_dealloc_mw, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_dealloc_pd(pd: *mut ibv_pd) -> c_int;
	pub fn ibv_cmd_dereg_mr(mr: *mut ibv_mr) -> c_int;
	pub fn ibv_cmd_destroy_ah(ah: *mut ibv_ah) -> c_int;
	pub fn ibv_cmd_destroy_cq(cq: *mut ibv_cq) -> c_int;
	pub fn ibv_cmd_destroy_flow(flow_id: *mut ibv_flow) -> c_int;
	pub fn ibv_cmd_destroy_qp(qp: *mut ibv_qp) -> c_int;
	pub fn ibv_cmd_destroy_srq(srq: *mut ibv_srq) -> c_int;
	pub fn ibv_cmd_detach_mcast(qp: *mut ibv_qp, gid: *const ibv_gid, lid: u16) -> c_int;
	pub fn ibv_cmd_exp_prefetch_mr(mr: *mut ibv_mr, attr: *mut ibv_exp_prefetch_attr) -> c_int;
	pub fn ibv_cmd_exp_reg_mr(mr_init_attr: *const ibv_exp_reg_mr_in, hca_va: u64, mr: *mut ibv_mr, cmd: *mut ibv_exp_reg_mr, cmd_size: usize, resp: *mut ibv_exp_reg_mr_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_get_context(context: *mut ibv_context, cmd: *mut ibv_get_context, cmd_size: usize, resp: *mut ibv_get_context_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_modify_qp(qp: *mut ibv_qp, attr: *mut ibv_qp_attr, attr_mask: c_int, cmd: *mut ibv_modify_qp, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_modify_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr, srq_attr_mask: c_int, cmd: *mut ibv_modify_srq, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_open_qp(context: *mut ibv_context, qp: *mut verbs_qp, vqp_sz: c_int, attr: *mut ibv_qp_open_attr, cmd: *mut ibv_open_qp, cmd_size: usize, resp: *mut ibv_create_qp_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_open_xrcd(context: *mut ibv_context, xrcd: *mut verbs_xrcd, vxrcd_size: c_int, attr: *mut ibv_xrcd_init_attr, cmd: *mut ibv_open_xrcd, cmd_size: usize, resp: *mut ibv_open_xrcd_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_poll_cq(cq: *mut ibv_cq, ne: c_int, wc: *mut ibv_wc) -> c_int;
	pub fn ibv_cmd_post_recv(ibqp: *mut ibv_qp, wr: *mut ibv_recv_wr, bad_wr: *mut *mut ibv_recv_wr) -> c_int;
	pub fn ibv_cmd_post_send(ibqp: *mut ibv_qp, wr: *mut ibv_send_wr, bad_wr: *mut *mut ibv_send_wr) -> c_int;
	pub fn ibv_cmd_post_srq_recv(srq: *mut ibv_srq, wr: *mut ibv_recv_wr, bad_wr: *mut *mut ibv_recv_wr) -> c_int;
	pub fn ibv_cmd_query_device(context: *mut ibv_context, device_attr: *mut ibv_device_attr, raw_fw_ver: *mut u64, cmd: *mut ibv_query_device, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_query_device_ex(context: *mut ibv_context, input: *const ibv_query_device_ex_input, attr: *mut ibv_device_attr_ex, attr_size: usize, raw_fw_ver: *mut u64, cmd: *mut ibv_query_device_ex, cmd_core_size: usize, cmd_size: usize, resp: *mut ibv_query_device_resp_ex, resp_core_size: usize, resp_size: usize) -> c_int;
	pub fn ibv_cmd_query_gid(context: *mut ibv_context, port_num: u8, index: c_int, gid: *mut ibv_gid) -> c_int;
	pub fn ibv_cmd_query_pkey(context: *mut ibv_context, port_num: u8, index: c_int, pkey: *mut u16) -> c_int;
	pub fn ibv_cmd_query_port(context: *mut ibv_context, port_num: u8, port_attr: *mut ibv_port_attr, cmd: *mut ibv_query_port, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_query_qp(qp: *mut ibv_qp, qp_attr: *mut ibv_qp_attr, attr_mask: c_int, qp_init_attr: *mut ibv_qp_init_attr, cmd: *mut ibv_query_qp, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_query_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr, cmd: *mut ibv_query_srq, cmd_size: usize) -> c_int;
	pub fn ibv_cmd_reg_mr(pd: *mut ibv_pd, addr: *mut c_void, length: usize, hca_va: u64, access: c_int, mr: *mut ibv_mr, cmd: *mut ibv_reg_mr, cmd_size: usize, resp: *mut ibv_reg_mr_resp, resp_size: usize) -> c_int;
	pub fn ibv_cmd_req_notify_cq(cq: *mut ibv_cq, solicited_only: c_int) -> c_int;
	pub fn ibv_cmd_rereg_mr(mr: *mut ibv_mr, flags: u32, addr: *mut c_void, length: usize, hca_va: u64, access: c_int, pd: *mut ibv_pd, cmd: *mut ibv_rereg_mr, cmd_sz: usize, resp: *mut ibv_rereg_mr_resp, resp_sz: usize) -> c_int;
	pub fn ibv_cmd_resize_cq(cq: *mut ibv_cq, cqe: c_int, cmd: *mut ibv_resize_cq, cmd_size: usize, resp: *mut ibv_resize_cq_resp, resp_size: usize) -> c_int;
	pub fn ibv_create_ah(pd: *mut ibv_pd, attr: *mut ibv_ah_attr) -> *mut ibv_ah;
	pub fn ibv_create_ah_from_wc(pd: *mut ibv_pd, wc: *mut ibv_wc, grh: *mut ibv_grh, port_num: u8) -> *mut ibv_ah;
	pub fn ibv_create_comp_channel(context: *mut ibv_context) -> *mut ibv_comp_channel;
	pub fn ibv_create_cq(context: *mut ibv_context, cqe: c_int, cq_context: *mut c_void, channel: *mut ibv_comp_channel, comp_vector: c_int) -> *mut ibv_cq;
	pub fn ibv_create_qp(pd: *mut ibv_pd, qp_init_attr: *mut ibv_qp_init_attr) -> *mut ibv_qp;
	pub fn ibv_create_srq(pd: *mut ibv_pd, srq_init_attr: *mut ibv_srq_init_attr) -> *mut ibv_srq;
	pub fn ibv_create_xrc_rcv_qp(init_attr: *mut ibv_qp_init_attr, xrc_rcv_qpn: *mut u32) -> c_int;
	pub fn ibv_create_xrc_srq(pd: *mut ibv_pd, xrc_domain: *mut ibv_xrc_domain, xrc_cq: *mut ibv_cq, srq_init_attr: *mut ibv_srq_init_attr) -> *mut ibv_srq;
	pub fn ibv_dealloc_pd(pd: *mut ibv_pd) -> c_int;
	pub fn ibv_dereg_mr(mr: *mut ibv_mr) -> c_int;
	pub fn ibv_destroy_ah(ah: *mut ibv_ah) -> c_int;
	pub fn ibv_destroy_comp_channel(channel: *mut ibv_comp_channel) -> c_int;
	pub fn ibv_destroy_cq(cq: *mut ibv_cq) -> c_int;
	pub fn ibv_destroy_qp(qp: *mut ibv_qp) -> c_int;
	pub fn ibv_destroy_srq(srq: *mut ibv_srq) -> c_int;
	pub fn ibv_detach_mcast(qp: *mut ibv_qp, gid: *const ibv_gid, lid: u16) -> c_int;
	pub fn ibv_dofork_range(base: *mut c_void, size: usize) -> c_int;
	pub fn ibv_dontfork_range(base: *mut c_void, size: usize) -> c_int;
	pub fn ibv_event_type_str(event: ibv_event_type) -> *const c_char;
	pub fn ibv_exp_cmd_alloc_dm(context: *mut ibv_context, attr: *mut ibv_exp_alloc_dm_attr, dm: *mut ibv_exp_dm, start_addr: *mut c_void, cmd: *mut ibv_exp_alloc_dm, cmd_core_size: usize, cmd_size: usize, resp: *mut ibv_exp_alloc_dm_resp, resp_core_size: usize, resp_size: usize) -> c_int;
	pub fn ibv_exp_cmd_arm_dct(context: *mut ibv_context, attr: *mut ibv_exp_arm_attr, cmd: *mut ibv_exp_arm_dct, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_arm_dct_resp, lib_resp_sz: usize, drv_resp_sz: usize) -> c_int;
	pub fn ibv_exp_cmd_create_cq(context: *mut ibv_context, cqe: c_int, channel: *mut ibv_comp_channel, comp_vector: c_int, cq: *mut ibv_cq, cmd: *mut ibv_exp_create_cq, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_create_cq_resp, lib_resp_sz: usize, drv_resp_sz: usize, attr: *mut ibv_exp_cq_init_attr) -> c_int;
	pub fn ibv_exp_cmd_create_dct(context: *mut ibv_context, dct: *mut ibv_exp_dct, attr: *mut ibv_exp_dct_init_attr, cmd: *mut ibv_exp_create_dct, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_create_dct_resp, lib_resp_sz: usize, drv_resp_sz: usize) -> c_int;
	pub fn ibv_exp_cmd_create_flow(qp: *mut ibv_qp, flow_attr: *mut ibv_exp_flow_attr) -> *mut ibv_exp_flow;
	pub fn ibv_exp_cmd_create_mr(in_: *mut ibv_exp_create_mr_in, mr: *mut ibv_mr, cmd: *mut ibv_exp_create_mr, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_create_mr_resp, lib_resp_sz: usize, drv_resp_sz: usize) -> c_int;
	pub fn ibv_exp_cmd_create_qp(context: *mut ibv_context, qp: *mut verbs_qp, vqp_sz: c_int, attr_exp: *mut ibv_exp_qp_init_attr, cmd_buf: *mut c_void, lib_cmd_size: usize, drv_cmd_size: usize, resp_buf: *mut c_void, lib_resp_size: usize, drv_resp_size: usize, force_exp: c_int) -> c_int;
	pub fn ibv_exp_cmd_create_rwq_ind_table(context: *mut ibv_context, init_attr: *mut ibv_exp_rwq_ind_table_init_attr, rwq_ind_table: *mut ibv_exp_rwq_ind_table, cmd: *mut ibv_exp_create_rwq_ind_table, cmd_core_size: usize, cmd_size: usize, resp: *mut ibv_exp_create_rwq_ind_table_resp, resp_core_size: usize, resp_size: usize) -> c_int;
	pub fn ibv_exp_cmd_create_srq(context: *mut ibv_context, srq: *mut verbs_srq, attr: *mut ibv_exp_create_srq_attr, cmd: *mut ibv_exp_create_srq, cmd_core_size: usize, cmd_size: usize, resp: *mut ibv_exp_create_srq_resp, resp_core_size: usize, resp_size: usize) -> c_int;
	pub fn ibv_exp_cmd_create_wq(context: *mut ibv_context, wq_init_attr: *mut ibv_exp_wq_init_attr, wq: *mut ibv_exp_wq, cmd: *mut ibv_exp_create_wq, cmd_core_size: usize, cmd_size: usize, resp: *mut ibv_exp_create_wq_resp, resp_core_size: usize, resp_size: usize) -> c_int;
	pub fn ibv_exp_cmd_destroy_dct(context: *mut ibv_context, dct: *mut ibv_exp_dct, cmd: *mut ibv_exp_destroy_dct, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_destroy_dct_resp, lib_resp_sz: usize, drv_resp_sz: usize) -> c_int;
	pub fn ibv_exp_cmd_destroy_flow(flow_id: *mut ibv_exp_flow) -> c_int;
	pub fn ibv_exp_cmd_destroy_rwq_ind_table(rwq_ind_table: *mut ibv_exp_rwq_ind_table) -> c_int;
	pub fn ibv_exp_cmd_destroy_wq(wq: *mut ibv_exp_wq) -> c_int;
	pub fn ibv_exp_cmd_free_dm(dm: *mut ibv_exp_dm) -> c_int;
	pub fn ibv_exp_cmd_getenv(context: *mut ibv_context, name: *const c_char, value: *mut c_char, n: usize) -> c_int;
	pub fn ibv_exp_cmd_modify_cq(cq: *mut ibv_cq, attr: *mut ibv_exp_cq_attr, attr_mask: c_int, cmd: *mut ibv_exp_modify_cq, cmd_size: usize) -> c_int;
	pub fn ibv_exp_cmd_modify_qp(qp: *mut ibv_qp, attr: *mut ibv_exp_qp_attr, attr_mask: u64, cmd: *mut ibv_exp_modify_qp, cmd_size: usize) -> c_int;
	pub fn ibv_exp_cmd_modify_wq(wq: *mut ibv_exp_wq, attr: *mut ibv_exp_wq_attr, cmd: *mut ib_exp_modify_wq, cmd_size: usize) -> c_int;
	pub fn ibv_exp_cmd_query_dct(context: *mut ibv_context, cmd: *mut ibv_exp_query_dct, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_query_dct_resp, lib_resp_sz: usize, drv_resp_sz: usize, attr: *mut ibv_exp_dct_attr) -> c_int;
	pub fn ibv_exp_cmd_query_device(context: *mut ibv_context, device_attr: *mut ibv_exp_device_attr, raw_fw_ver: *mut u64, cmd: *mut ibv_exp_query_device, cmd_size: usize) -> c_int;
	pub fn ibv_exp_cmd_query_mkey(context: *mut ibv_context, mr: *mut ibv_mr, mkey_attr: *mut ibv_exp_mkey_attr, cmd: *mut ibv_exp_query_mkey, lib_cmd_sz: usize, drv_cmd_sz: usize, resp: *mut ibv_exp_query_mkey_resp, lib_resp_sz: usize, drv_resp_sz: usize) -> c_int;
	pub fn ibv_exp_cmd_set_context_attr(context: *mut ibv_context, attr: *mut ibv_exp_open_device_attr, cmd: *mut ibv_exp_cmd_set_context_attr, cmd_size: usize) -> c_int;
	pub fn ibv_exp_get_device_list(num_devices: *mut c_int) -> *mut *mut ibv_device;
	pub fn ibv_fork_init() -> c_int;
	pub fn ibv_free_device_list(list: *mut *mut ibv_device);
	pub fn ibv_get_async_event(context: *mut ibv_context, event: *mut ibv_async_event) -> c_int;
	pub fn ibv_get_cq_event(channel: *mut ibv_comp_channel, cq: *mut *mut ibv_cq, cq_context: *mut *mut c_void) -> c_int;
	pub fn ibv_get_device_guid(device: *mut ibv_device) -> u64;
	pub fn ibv_get_device_list(num_devices: *mut c_int) -> *mut *mut ibv_device;
	pub fn ibv_get_device_name(device: *mut ibv_device) -> *const c_char;
	pub fn ibv_get_sysfs_path() -> *const c_char;
	pub fn ibv_init_ah_from_wc(context: *mut ibv_context, port_num: u8, wc: *mut ibv_wc, grh: *mut ibv_grh, ah_attr: *mut ibv_ah_attr) -> c_int;
	pub fn ibv_modify_qp(qp: *mut ibv_qp, attr: *mut ibv_qp_attr, attr_mask: c_int) -> c_int;
	pub fn ibv_modify_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr, srq_attr_mask: c_int) -> c_int;
	pub fn ibv_modify_xrc_rcv_qp(xrc_domain: *mut ibv_xrc_domain, xrc_qp_num: u32, attr: *mut ibv_qp_attr, attr_mask: c_int) -> c_int;
	pub fn ibv_node_type_str(node_type: ibv_node_type) -> *const c_char;
	pub fn ibv_open_device(device: *mut ibv_device) -> *mut ibv_context;
	pub fn ibv_open_xrc_domain(context: *mut ibv_context, fd: c_int, oflag: c_int) -> *mut ibv_xrc_domain;
	pub fn ibv_port_state_str(port_state: ibv_port_state) -> *const c_char;
	pub fn ibv_query_device(context: *mut ibv_context, device_attr: *mut ibv_device_attr) -> c_int;
	pub fn ibv_query_gid(context: *mut ibv_context, port_num: u8, index: c_int, gid: *mut ibv_gid) -> c_int;
	pub fn ibv_query_pkey(context: *mut ibv_context, port_num: u8, index: c_int, pkey: *mut u16) -> c_int;
	pub fn ibv_query_port(context: *mut ibv_context, port_num: u8, port_attr: *mut ibv_port_attr) -> c_int;
	pub fn ibv_query_qp(qp: *mut ibv_qp, attr: *mut ibv_qp_attr, attr_mask: c_int, init_attr: *mut ibv_qp_init_attr) -> c_int;
	pub fn ibv_query_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr) -> c_int;
	pub fn ibv_query_xrc_rcv_qp(xrc_domain: *mut ibv_xrc_domain, xrc_qp_num: u32, attr: *mut ibv_qp_attr, attr_mask: c_int, init_attr: *mut ibv_qp_init_attr) -> c_int;
	pub fn ibv_rate_to_mbps(rate: ibv_rate) -> c_int;
	pub fn ibv_rate_to_mult(rate: ibv_rate) -> c_int;
	pub fn ibv_read_sysfs_file(dir: *const c_char, file: *const c_char, buf: *mut c_char, size: usize) -> c_int;
	pub fn ibv_reg_mr(pd: *mut ibv_pd, addr: *mut c_void, length: usize, access: c_int) -> *mut ibv_mr;
	pub fn ibv_reg_xrc_rcv_qp(xrc_domain: *mut ibv_xrc_domain, xrc_qp_num: u32) -> c_int;
	pub fn ibv_register_driver(name: *const c_char, init_func: ibv_driver_init_func);
	pub fn ibv_rereg_mr(mr: *mut ibv_mr, flags: c_int, pd: *mut ibv_pd, addr: *mut c_void, length: usize, access: c_int) -> c_int;
	pub fn ibv_resize_cq(cq: *mut ibv_cq, cqe: c_int) -> c_int;
	pub fn ibv_unreg_xrc_rcv_qp(xrc_domain: *mut ibv_xrc_domain, xrc_qp_num: u32) -> c_int;
	pub fn ibv_wc_status_str(status: ibv_wc_status) -> *const c_char;
}
