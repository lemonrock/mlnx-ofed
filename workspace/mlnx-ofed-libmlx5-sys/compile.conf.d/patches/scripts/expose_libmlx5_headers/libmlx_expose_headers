#!/usr/bin/env sh

# The original script is incredibly brittle.
# Instead, it has been replacd with code that simply outputs the generated file.
# The generated file was originally obtained by:-
# 1. Downloading `MLNX_OFED_LINUX-4.3-1.0.1.0-ubuntu18.04-x86_64.tgz`
# 2. Extracting using tar --extract --gzip --file MLNX_OFED_LINUX-4.3-1.0.1.0-ubuntu18.04-x86_64.tgz
# 3. ar -x `DEBS/libmlx5-dev_41mlnx1-OFED.4.3.0.2.1.43101_amd64.deb` data.tar.xz
# 4. mkdir
# 4. tar --extract --file --xz data.tar.xz
#


set -e
set -u
set -f

_program_path_find()
{
    if [ "${_program_fattening_program_path+set}" = 'set' ]; then
        printf '%s\n' "$_program_fattening_program_path"

    elif [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
            pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
            printf '\n'
        fi

    else

        # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)

        _program_path_find_parentPath()
        {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
        }

        # pdksh / mksh have problems with unsetting a variable that was never set...
        if [ "${CDPATH+set}" = 'set' ]; then
            unset CDPATH
        fi

        if command -v realpath 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$(realpath "$0")"

                _program_path_find_parentPath
                pwd -P
            )
        elif command -v readlink 1>/dev/null 2>/dev/null; then
            (
                scriptPath="$0"

                while [ -L "$scriptPath" ]
                do
                    _program_path_find_parentPath
                    scriptPath="$(readlink "$scriptPath")"
                done

                _program_path_find_parentPath
                pwd -P
            )
        else
            # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
            (
                scriptPath="$0"

                _program_path_find_parentPath
                pwd -P
            )
        fi

    fi
}

extra()
{
	if [ -z "${CARGO_MANIFEST_DIR+is_unset}" ]; then
		export CARGO_MANIFEST_DIR="$homeFolderPath"
		printf 'build-under-cargo:%s\n' "Whilst this script (compile) is designed to be run under cargo, it can run independently. We're setting CARGO_MANIFEST_DIR to '$CARGO_MANIFEST_DIR'" 1>&2
	fi
}

original()
{
	local programFolderPath="$(_program_path_find)"
	
	local prefix="$4"
	local output_file="$prefix/include/infiniband/mlx5_hw.h"
	mkdir -m 0700 -p "$prefix/include/infiniband"
	
	cp "$programFolderPath"/mlx5_hw.h "$output_file"
}
